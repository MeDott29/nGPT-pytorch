"""
nGPT Explorer Configuration Script

This script allows you to launch the nGPT Explorer with different model configurations.
It's useful for comparing different model architectures and parameters.
"""

import argparse
import subprocess
import sys
import os

def main():
    parser = argparse.ArgumentParser(description="Launch nGPT Explorer with different configurations")
    
    parser.add_argument("--dim", type=int, default=64, help="Model dimension (default: 64)")
    parser.add_argument("--depth", type=int, default=2, help="Model depth (default: 2)")
    parser.add_argument("--heads", type=int, default=4, help="Number of attention heads (default: 4)")
    parser.add_argument("--tokens", type=int, default=256, help="Number of tokens (default: 256)")
    parser.add_argument("--attn_norm_qk", action="store_true", help="Enable query/key normalization")
    parser.add_argument("--no_controller", action="store_true", help="Disable controller input (keyboard only)")
    parser.add_argument("--preset", choices=["tiny", "small", "medium", "large"], 
                        help="Use a preset configuration")
    
    args = parser.parse_args()
    
    # Apply presets if specified
    if args.preset:
        if args.preset == "tiny":
            args.dim = 32
            args.depth = 1
            args.heads = 2
        elif args.preset == "small":
            args.dim = 64
            args.depth = 2
            args.heads = 4
        elif args.preset == "medium":
            args.dim = 128
            args.depth = 4
            args.heads = 8
        elif args.preset == "large":
            args.dim = 256
            args.depth = 6
            args.heads = 16
    
    # Create a temporary configuration file
    config_content = f"""
# nGPT Explorer Configuration
# Generated by explore_configs.py

MODEL_DIM = {args.dim}
MODEL_DEPTH = {args.depth}
MODEL_HEADS = {args.heads}
NUM_TOKENS = {args.tokens}
ATTN_NORM_QK = {args.attn_norm_qk}
USE_CONTROLLER = {not args.no_controller}
"""
    
    with open("explorer_config.py", "w") as f:
        f.write(config_content)
    
    print(f"Launching nGPT Explorer with configuration:")
    print(f"  Dimension: {args.dim}")
    print(f"  Depth: {args.depth}")
    print(f"  Heads: {args.heads}")
    print(f"  Tokens: {args.tokens}")
    print(f"  Attention Norm Q/K: {args.attn_norm_qk}")
    print(f"  Controller Enabled: {not args.no_controller}")
    
    # Launch the explorer
    try:
        if args.no_controller:
            print("\nRunning in keyboard-only mode (no controller)")
        else:
            print("\nRunning with controller support")
            print("Make sure your Xbox controller is connected")
        
        print("\nStarting nGPT Explorer...\n")
        
        # Use the appropriate Python command based on the platform
        python_cmd = "python3" if sys.platform != "win32" else "python"
        
        # Run the explorer
        subprocess.run([python_cmd, "ngpt_explorer.py"])
        
    except Exception as e:
        print(f"Error launching explorer: {e}")
    
    # Clean up
    if os.path.exists("explorer_config.py"):
        os.remove("explorer_config.py")

if __name__ == "__main__":
    main() 